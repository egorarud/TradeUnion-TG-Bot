const { Markup } = require('telegraf');
const ADMIN_IDS = [1068642847]; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram ID –∞–¥–º–∏–Ω–æ–≤
const { createEvent, getUpcomingEvents, getEventById, updateEvent } = require('../services/eventService');
const { getAllPrivileges, createPrivilege, updatePrivilege } = require('../services/privilegeService');
const {
  getAllFitnessCenters,
  createFitnessCenter,
  updateFitnessCenter,
  deleteFitnessCenter,
  getSlotsByCenter,
  createFitnessSlot,
  updateFitnessSlot,
  deleteFitnessSlot,
  getSlotById
} = require('../services/fitnessService');

const adminStates = {};

function isAdmin(ctx) {
  return ADMIN_IDS.includes(ctx.from.id);
}

module.exports = (bot) => {
  bot.command('admin', async (ctx) => {
    if (!isAdmin(ctx)) {
      return ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.');
    }
    await ctx.reply('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:',
      Markup.inlineKeyboard([
        [Markup.button.callback('–§–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä', 'admin_fitness'), Markup.button.callback('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', 'admin_events')],
        [Markup.button.callback('–ü—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏–∏', 'admin_privileges'), Markup.button.callback('FAQ/–î–æ–∫—É–º–µ–Ω—Ç—ã', 'admin_faq')],
        [Markup.button.callback('–ó–∞–ø–∏—Å–∏ .xlsx', 'admin_export'), Markup.button.callback('–í–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'admin_questions')],
      ])
    );
  });

  // –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫
  bot.action('admin_fitness', async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    await ctx.editMessageText('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä–∞–º–∏:',
      Markup.inlineKeyboard([
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–Ω—Ç—Ä', 'admin_fitness_add_center')],
        [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—Ç—Ä', 'admin_fitness_edit_center')],
        [Markup.button.callback('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ü–µ–Ω—Ç—Ä', 'admin_fitness_delete_center')],
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin_back')],
      ])
    );
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä–∞
  bot.action('admin_fitness_add_center', async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    adminStates[ctx.from.id] = { step: 'add_fitness_center_name', center: {} };
    await ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä–∞:');
  });

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ (–≤—ã–±–æ—Ä)
  bot.action('admin_fitness_edit_center', async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    const centers = await getAllFitnessCenters();
    if (!centers.length) return ctx.editMessageText('–ù–µ—Ç —Ü–µ–Ω—Ç—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—Ç—Ä:',
      Markup.inlineKeyboard(
        centers.map(c => [Markup.button.callback(c.name, `admin_fitness_edit_center_${c.id}`)])
      )
    );
  });

  // –í—ã–±–æ—Ä —Ü–µ–Ω—Ç—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  bot.action(/admin_fitness_edit_center_(\d+)/, async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    const centerId = Number(ctx.match[1]);
    const centers = await getAllFitnessCenters();
    const center = centers.find(c => c.id === centerId);
    if (!center) return ctx.editMessageText('–¶–µ–Ω—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    adminStates[ctx.from.id] = { step: 'edit_fitness_center_name', centerId, center };
    await ctx.editMessageText(
      `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ "${center.name}".\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–ª–∏ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–µ–µ):`,
      Markup.inlineKeyboard([
        [Markup.button.callback('–°–ª–æ—Ç—ã —Ü–µ–Ω—Ç—Ä–∞', `admin_fitness_slots_${centerId}`)],
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin_fitness')]
      ])
    );
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–∞ (–≤—ã–±–æ—Ä)
  bot.action('admin_fitness_delete_center', async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    const centers = await getAllFitnessCenters();
    if (!centers.length) return ctx.editMessageText('–ù–µ—Ç —Ü–µ–Ω—Ç—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
      Markup.inlineKeyboard(
        centers.map(c => [Markup.button.callback(c.name, `admin_fitness_delete_center_${c.id}`)])
      )
    );
  });

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–Ω—Ç—Ä–∞
  bot.action(/admin_fitness_delete_center_(\d+)/, async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    const centerId = Number(ctx.match[1]);
    await deleteFitnessCenter(centerId);
    await ctx.editMessageText('–¶–µ–Ω—Ç—Ä —É–¥–∞–ª—ë–Ω.');
  });

  // --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞–º–∏ ---
  bot.action(/admin_fitness_slots_(\d+)/, async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    const centerId = Number(ctx.match[1]);
    const slots = await getSlotsByCenter(centerId);
    await ctx.editMessageText('–°–ª–æ—Ç—ã —ç—Ç–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞:',
      Markup.inlineKeyboard([
        ...slots.map(s => [Markup.button.callback(
          `${s.type} ‚Äî ${new Date(s.date).toLocaleString('ru-RU')}`,
          `admin_fitness_edit_slot_${s.id}`
        )]),
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ—Ç', `admin_fitness_add_slot_${centerId}`)],
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `admin_fitness_edit_center_${centerId}`)]
      ])
    );
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞
  bot.action(/admin_fitness_add_slot_(\d+)/, async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    const centerId = Number(ctx.match[1]);
    adminStates[ctx.from.id] = { step: 'add_fitness_slot_type', slot: { centerId } };
    await ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:');
  });

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞ (–≤—ã–±–æ—Ä)
  bot.action(/admin_fitness_edit_slot_(\d+)/, async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    const slotId = Number(ctx.match[1]);
    const slot = await getSlotById(slotId);
    if (!slot) return ctx.editMessageText('–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    adminStates[ctx.from.id] = { step: 'edit_fitness_slot_type', slotId, slot };
    await ctx.editMessageText(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ—Ç–∞.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–∏–ª–∏ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–∏–π):`);
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ—Ç–∞ (–≤—ã–±–æ—Ä)
  bot.action(/admin_fitness_delete_slot_(\d+)/, async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    const slotId = Number(ctx.match[1]);
    await deleteFitnessSlot(slotId);
    await ctx.editMessageText('–°–ª–æ—Ç —É–¥–∞–ª—ë–Ω.');
  });

  // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —à–∞–≥–æ–≤ –¥–ª—è —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä–æ–≤ –∏ —Å–ª–æ—Ç–æ–≤ ---
  bot.on('text', async (ctx, next) => {
    if (!isAdmin(ctx)) return next();
    const state = adminStates[ctx.from.id];
    if (!state) return next();
    // --- –¶–µ–Ω—Ç—Ä—ã ---
    if (state.step === 'add_fitness_center_name') {
      state.center.name = ctx.message.text;
      state.step = 'add_fitness_center_address';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ü–µ–Ω—Ç—Ä–∞ (–∏–ª–∏ "-" –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):');
    }
    if (state.step === 'add_fitness_center_address') {
      state.center.address = ctx.message.text === '-' ? null : ctx.message.text;
      await createFitnessCenter(state.center);
      adminStates[ctx.from.id] = undefined;
      return ctx.reply('–¶–µ–Ω—Ç—Ä –¥–æ–±–∞–≤–ª–µ–Ω!');
    }
    if (state.step === 'edit_fitness_center_name') {
      if (ctx.message.text !== '-') state.center.name = ctx.message.text;
      state.step = 'edit_fitness_center_address';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å (–∏–ª–∏ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–∏–π):');
    }
    if (state.step === 'edit_fitness_center_address') {
      if (ctx.message.text !== '-') state.center.address = ctx.message.text;
      await updateFitnessCenter(state.centerId, state.center);
      adminStates[ctx.from.id] = undefined;
      return ctx.reply('–¶–µ–Ω—Ç—Ä –æ–±–Ω–æ–≤–ª—ë–Ω!');
    }
    // --- –°–ª–æ—Ç—ã ---
    if (state.step === 'add_fitness_slot_type') {
      state.slot.type = ctx.message.text;
      state.step = 'add_fitness_slot_date';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-08-01 18:00):');
    }
    if (state.step === 'add_fitness_slot_date') {
      const date = new Date(ctx.message.text);
      if (isNaN(date)) return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 2024-08-01 18:00');
      state.slot.date = date;
      state.step = 'add_fitness_slot_capacity';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (—á–∏—Å–ª–æ):');
    }
    if (state.step === 'add_fitness_slot_capacity') {
      state.slot.capacity = Number(ctx.message.text);
      await createFitnessSlot(state.slot);
      adminStates[ctx.from.id] = undefined;
      return ctx.reply('–°–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!');
    }
    if (state.step === 'edit_fitness_slot_type') {
      if (ctx.message.text !== '-') state.slot.type = ctx.message.text;
      state.step = 'edit_fitness_slot_date';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–∏–ª–∏ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω—é—é):');
    }
    if (state.step === 'edit_fitness_slot_date') {
      if (ctx.message.text !== '-') {
        const date = new Date(ctx.message.text);
        if (isNaN(date)) return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 2024-08-01 18:00');
        state.slot.date = date;
      }
      state.step = 'edit_fitness_slot_capacity';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–∏–ª–∏ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω—é—é):');
    }
    if (state.step === 'edit_fitness_slot_capacity') {
      if (ctx.message.text !== '-') state.slot.capacity = Number(ctx.message.text);
      await updateFitnessSlot(state.slotId, state.slot);
      adminStates[ctx.from.id] = undefined;
      return ctx.reply('–°–ª–æ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!');
    }
    return next();
  });

  bot.action('admin_events', async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    await ctx.editMessageText('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏:',
      Markup.inlineKeyboard([
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å', 'admin_event_add')],
        [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'admin_event_edit')],
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin_back')],
      ])
    );
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
  bot.action('admin_event_add', async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    adminStates[ctx.from.id] = { step: 'add_title', event: {} };
    await ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:');
  });

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–≤—ã–±–æ—Ä)
  bot.action('admin_event_edit', async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    const events = await getUpcomingEvents();
    if (!events.length) return ctx.editMessageText('–ù–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
      Markup.inlineKeyboard(
        events.map(e => [Markup.button.callback(e.title, `admin_event_edit_${e.id}`)])
      )
    );
  });

  // –í—ã–±–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  bot.action(/admin_event_edit_(\d+)/, async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    const eventId = Number(ctx.match[1]);
    const event = await getEventById(eventId);
    if (!event) return ctx.editMessageText('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
    adminStates[ctx.from.id] = { step: 'edit_title', eventId, event };
    await ctx.editMessageText(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è "${event.title}".\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–ª–∏ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–µ–µ):`);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —à–∞–≥–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  bot.on('text', async (ctx, next) => {
    if (!isAdmin(ctx)) return next();
    const state = adminStates[ctx.from.id];
    if (!state) return next();
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    if (state.step === 'add_title') {
      state.event.title = ctx.message.text;
      state.step = 'add_description';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:');
    }
    if (state.step === 'add_description') {
      state.event.description = ctx.message.text;
      state.step = 'add_date';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2024-08-01 18:00):');
    }
    if (state.step === 'add_date') {
      const date = new Date(ctx.message.text);
      if (isNaN(date)) return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 2024-08-01 18:00');
      state.event.date = date;
      state.step = 'add_capacity';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (—á–∏—Å–ª–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ "-"):');
    }
    if (state.step === 'add_capacity') {
      const cap = ctx.message.text;
      state.event.capacity = cap === '-' ? null : Number(cap);
      await createEvent(state.event);
      adminStates[ctx.from.id] = undefined;
      return ctx.reply('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
    }
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    if (state.step === 'edit_title') {
      if (ctx.message.text !== '-') state.event.title = ctx.message.text;
      state.step = 'edit_description';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–µ–µ):');
    }
    if (state.step === 'edit_description') {
      if (ctx.message.text !== '-') state.event.description = ctx.message.text;
      state.step = 'edit_date';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–∏–ª–∏ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–µ–µ):');
    }
    if (state.step === 'edit_date') {
      if (ctx.message.text !== '-') {
        const date = new Date(ctx.message.text);
        if (isNaN(date)) return ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 2024-08-01 18:00');
        state.event.date = date;
      }
      state.step = 'edit_capacity';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å (–∏–ª–∏ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–µ–µ):');
    }
    if (state.step === 'edit_capacity') {
      if (ctx.message.text !== '-') state.event.capacity = Number(ctx.message.text);
      await updateEvent(state.eventId, state.event);
      adminStates[ctx.from.id] = undefined;
      return ctx.reply('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!');
    }
    return next();
  });

  bot.action('admin_privileges', async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    await ctx.editMessageText('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏—è–º–∏:',
      Markup.inlineKeyboard([
        [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å', 'admin_priv_add')],
        [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', 'admin_priv_edit')],
        [Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', 'admin_back')],
      ])
    );
  });

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏
  bot.action('admin_priv_add', async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    adminStates[ctx.from.id] = { step: 'add_priv_title', priv: {} };
    await ctx.editMessageText('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:');
  });

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ (–≤—ã–±–æ—Ä)
  bot.action('admin_priv_edit', async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    const privs = await getAllPrivileges();
    if (!privs.length) return ctx.editMessageText('–ù–µ—Ç –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
    await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
      Markup.inlineKeyboard(
        privs.map(p => [Markup.button.callback(p.title, `admin_priv_edit_${p.id}`)])
      )
    );
  });

  // –í—ã–±–æ—Ä –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  bot.action(/admin_priv_edit_(\d+)/, async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    const privId = Number(ctx.match[1]);
    const privs = await getAllPrivileges();
    const priv = privs.find(p => p.id === privId);
    if (!priv) return ctx.editMessageText('–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    adminStates[ctx.from.id] = { step: 'edit_priv_title', privId, priv };
    await ctx.editMessageText(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ "${priv.title}".\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–∏–ª–∏ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–µ–µ):`);
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —à–∞–≥–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π
  bot.on('text', async (ctx, next) => {
    if (!isAdmin(ctx)) return next();
    const state = adminStates[ctx.from.id];
    if (!state) return next();
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏
    if (state.step === 'add_priv_title') {
      state.priv.title = ctx.message.text;
      state.step = 'add_priv_details';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ (–æ–ø–∏—Å–∞–Ω–∏–µ) –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:');
    }
    if (state.step === 'add_priv_details') {
      state.priv.details = ctx.message.text;
      state.step = 'add_priv_link';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É (–∏–ª–∏ "-" –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è):');
    }
    if (state.step === 'add_priv_link') {
      state.priv.link = ctx.message.text === '-' ? null : ctx.message.text;
      await createPrivilege(state.priv);
      adminStates[ctx.from.id] = undefined;
      return ctx.reply('–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
    }
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏
    if (state.step === 'edit_priv_title') {
      if (ctx.message.text !== '-') state.priv.title = ctx.message.text;
      state.step = 'edit_priv_details';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–µ—Ç–∞–ª–∏ (–∏–ª–∏ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω–∏–µ):');
    }
    if (state.step === 'edit_priv_details') {
      if (ctx.message.text !== '-') state.priv.details = ctx.message.text;
      state.step = 'edit_priv_link';
      return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É (–∏–ª–∏ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–µ–∂–Ω—é—é/–æ—á–∏—Å—Ç–∏—Ç—å):');
    }
    if (state.step === 'edit_priv_link') {
      if (ctx.message.text !== '-') state.priv.link = ctx.message.text;
      await updatePrivilege(state.privId, state.priv);
      adminStates[ctx.from.id] = undefined;
      return ctx.reply('–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
    }
    return next();
  });

  bot.action('admin_faq', async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    await ctx.editMessageText('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ FAQ –∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥–º–µ–Ω—é –∏ –ª–æ–≥–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è FAQ/–¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
  });

  bot.action('admin_export', async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    await ctx.editMessageText('–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π –≤ .xlsx (—Ñ–∏—Ç–Ω–µ—Å, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è)');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
  });

  bot.action('admin_questions', async (ctx) => {
    if (!isAdmin(ctx)) return ctx.answerCbQuery('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
    await ctx.editMessageText('–í—Ö–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ—Ç–≤–µ—Ç–∏—Ç—å/–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å)');
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
  });
}; 